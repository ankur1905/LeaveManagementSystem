<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>false</active>
        <api_name>x_snc_lms_1.GetBalanceLeaves</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>GetBalanceLeaves</name>
        <script><![CDATA[var GetBalanceLeaves = Class.create();
GetBalanceLeaves.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    getLeaves: function() {
        var userId = this.getParameter('userId');
        var ga = new GlideRecord('x_snc_lms_1_applied_leaves');
        ga.addQuery('user.sys_id', userId);
//         ga.addQuery('status', 'approved');
		ga.addEncodedQuery("status=approved^from>=javascript:gs.beginningOfThisYear()");
// 		ga.addEncodedQuery("userDYNAMIC90d1921e5f510100a9ad2572f2b477fe^status=approved^from>=javascript:gs.beginningOfThisYear()");
        ga.query();
        var sickLeave = 0;
        var casualLeave = 0;
        var paidLeave = 0;
        var compOff = 0;
        while (ga.next()) {
            switch (ga.getDisplayValue('leave_type')) {
                case 'Sick Leave':
                    sickLeave += parseInt(ga.getDisplayValue('days'));
                    break;
                case 'Casual Leave':
                    casualLeave += parseInt(ga.getDisplayValue('days'));
                    break;
                case 'Paid Leave':
                    paidLeave += parseInt(ga.getDisplayValue('days'));
                    break;
                case 'Comp Off':
                    compOff += parseInt(ga.getDisplayValue('days'));
                    break;
            }
        }
        var obj = {};
        obj.sickLeave = sickLeave;
        obj.casualLeave = casualLeave;
        obj.paidLeave = paidLeave;
        obj.compOff = compOff;
        return JSON.stringify(obj);
    },

    getLeaveBalance: function() {
        var gr = new GlideRecord('x_snc_lms_1_leaves');
        gr.query();
        var obj = {};
        while (gr.next()) {
            switch (gr.getDisplayValue('name')) {
                case 'Sick Leave':
                    obj.sickLeave = gr.getDisplayValue('limit');
                    break;
                case 'Casual Leave':
                    obj.casualLeave = gr.getDisplayValue('limit');
                    break;
                case 'Paid Leave':
                    obj.paidLeave = gr.getDisplayValue('limit');
                    break;
                case 'Comp Off':
                    obj.compOff = gr.getDisplayValue('limit');
                    break;
            }
        }
		return JSON.stringify(obj);
    },
    type: 'GetBalanceLeaves'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-23 19:54:24</sys_created_on>
        <sys_id>731e08d01bc1d810eb2496482b4bcbc7</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>GetBalanceLeaves</sys_name>
        <sys_package display_value="LMS" source="x_snc_lms_1">1d40378c1b41d810eb2496482b4bcb0b</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="LMS">1d40378c1b41d810eb2496482b4bcb0b</sys_scope>
        <sys_update_name>sys_script_include_731e08d01bc1d810eb2496482b4bcbc7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-05-26 10:24:26</sys_updated_on>
    </sys_script_include>
</record_update>
