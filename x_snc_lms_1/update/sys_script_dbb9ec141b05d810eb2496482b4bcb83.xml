<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_snc_lms_1_applied_leaves</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Validate Leave limit</name>
        <order>400</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous) {
    if (current.days == 0) {
        gs.addErrorMessage("Please validate the dates. Your working day count is 0?");
        current.setAbortAction(true);
        return;
    }
	
	var userDetail = new getUserDetails();
	user = userDetail.getDetail(gs.getUserID());
	var holidaysInDuration = new GetHolidaysInLeaveDuration();
	holidaysCount = holidaysInDuration.getHolidays(user.country, user.state, current.from, current.to);
	if(holidaysCount > 0){
		current.days = current.days - holidaysCount;
		if (current.days <= 0) {
			gs.addErrorMessage("Please validate the dates. Your working day count is 0?");
			current.setAbortAction(true);
			return;
		}
	}
	
	
    var fromDate = new GlideDateTime(current.from);
    var toDate = new GlideDateTime(current.to);
    var todayDate = new GlideDateTime();
    var validateLeaveLimit = new ValidateLeaveLimit();
    var response;
    var resp;
    if (fromDate.getYearUTC() > todayDate.getYearUTC()) { //Full leave duration is for next year
        response = validateLeaveLimit.validateNextYearLimit(fromDate, toDate, current.leave_type, current.leave_type.getDisplayValue(), current.user.sys_id, current.days);
        resp = JSON.parse(response);
    } else if (toDate.getYearUTC() == todayDate.getYearUTC()) { //Full leave duration is for current year
        response = validateLeaveLimit.validateCurrentYearLimit(fromDate, toDate, current.leave_type, current.leave_type.getDisplayValue(), current.user.sys_id, current.days);
        resp = JSON.parse(response);
    } else {//leave duration is spanning between years
        var lastDate = new GlideDateTime();
        var firstDate = new GlideDateTime();
        var lastD = "" + todayDate.getYearUTC() + '-12-31 00:00:00';
        lastDate.setValue(lastD);
// 		var leaveThisYear = parseInt(GlideDateTime.subtract(fromDate, lastDate).getDisplayValue().split(" ")[0]) + 1;
		
		var weekdaysCalculation = new GetWeekdaysInLeaveDuration();
		var leaveThisYear = weekdaysCalculation.getDays(fromDate, lastDate);
		
		
        response = validateLeaveLimit.validateCurrentYearLimit(fromDate, lastDate, current.leave_type, current.leave_type.getDisplayValue(), current.user.sys_id, leaveThisYear);
        resp = JSON.parse(response);
        if (resp.error == '') {
            var nextYear = todayDate.getYearUTC() + 1;
            var firstD = "" + nextYear + '-01-01 00:00:00';
            firstDate.setValue(firstD);
// 			var leaveNextYear = parseInt(GlideDateTime.subtract(firstDate, toDate).getDisplayValue().split(" ")[0]) + 1;
			var leaveNextYear = weekdaysCalculation.getDays(firstDate, toDate);
            response = validateLeaveLimit.validateNextYearLimit(firstDate, toDate, current.leave_type, current.leave_type.getDisplayValue(), current.user.sys_id, leaveNextYear);
            resp = JSON.parse(response);
        }
    }

    if (resp.error != "") {
        gs.addErrorMessage(resp.error);
        if (resp.info != "") {
            gs.addInfoMessage(resp.info);
        }
        current.setAbortAction(true);
    }

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-23 22:04:17</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>dbb9ec141b05d810eb2496482b4bcb83</sys_id>
        <sys_mod_count>108</sys_mod_count>
        <sys_name>Validate Leave limit</sys_name>
        <sys_overrides/>
        <sys_package display_value="LMS" source="x_snc_lms_1">1d40378c1b41d810eb2496482b4bcb0b</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS">1d40378c1b41d810eb2496482b4bcb0b</sys_scope>
        <sys_update_name>sys_script_dbb9ec141b05d810eb2496482b4bcb83</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-06-04 06:32:14</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=dbb9ec141b05d810eb2496482b4bcb83"/>
</record_update>
